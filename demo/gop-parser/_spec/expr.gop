node Expr {
	exprNode()
}

node (
	Ident      Expr
	BasicLit   Expr
	CallExpr   Expr
	ParenExpr  Expr
	UnaryExpr  Expr
	BinaryExpr Expr
)

expr = termExpr | (X:expr binOp Y:expr as BinaryExpr {
	OpPos: binOp.Pos
	Op: binOp.Tok
})

binOp = "+" | "-"

termExpr = unaryExpr | (X:termExpr termOp Y:termExpr as BinaryExpr {
	OpPos: termOp.Pos
	Op: termOp.Tok
})

termOp = "*" | "/" | "%"

unaryExpr = primaryExpr | (unaryOp X:unaryExpr as UnaryExpr {
	OpPos: unaryOp.Pos
	Op: unaryOp.Tok
})

unaryOp = "+" | "-" | "!" | "^"

primaryExpr = operand | CallExpr

operand = BasicLit | Ident | ParenExpr

BasicLit = v:(INT | FLOAT | IMAG | CHAR | STRING) {
	ValuePos: v.Pos
	Kind: v.Tok
	Value: v.Lit
}

Ident = i:IDENT {
	NamePos: i.Pos
	Name: i.Lit
}

ParenExpr = lp:"(" X:expr rp:")" {
	Lparen: lp.Pos
	Rparen: rp.Pos
}

CallExpr = primaryExpr lp:"(" ?(Args:(expr % ",") ?ell:"..." ?",") rp:")" {
	Fun: primaryExpr
	Lparen: lp.Pos
	Ellipsis: ell != nil ? ell.Pos : 0
	Rparen: rp.Pos
}
