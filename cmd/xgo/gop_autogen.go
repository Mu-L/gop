// Code generated by gop (Go+); DO NOT EDIT.

package main

import (
	fmt1 "fmt"
	"github.com/goplus/cobra/xcmd"
	build1 "github.com/goplus/gop/cmd/internal/build"
	"github.com/goplus/gop/cmd/internal/gopfmt"
	install1 "github.com/goplus/gop/cmd/internal/install"
	run1 "github.com/goplus/gop/cmd/internal/run"
	test1 "github.com/goplus/gop/cmd/internal/test"
	"github.com/goplus/gop/env"
	"github.com/qiniu/x/stringutil"
	"runtime"
)

const _ = true

type build struct {
	xcmd.Command
	*App
}
type fmt struct {
	xcmd.Command
	*App
}
type install struct {
	xcmd.Command
	*App
}
type run struct {
	xcmd.Command
	*App
}
type test struct {
	xcmd.Command
	*App
}
type version struct {
	xcmd.Command
	*App
}
type App struct {
	xcmd.App
}

func (this *App) Main() {
	_gop_obj0 := &build{App: this}
	_gop_obj1 := &fmt{App: this}
	_gop_obj2 := &install{App: this}
	_gop_obj3 := &run{App: this}
	_gop_obj4 := &test{App: this}
	_gop_obj5 := &version{App: this}
	xcmd.Gopt_App_Main(this, _gop_obj0, _gop_obj1, _gop_obj2, _gop_obj3, _gop_obj4, _gop_obj5)
}
//line cmd/xgo/build_cmd.gox:20
func (this *build) Main(_gop_arg0 string) {
	this.Command.Main(_gop_arg0)
//line cmd/xgo/build_cmd.gox:20:1
	this.Short("Build Go+ files")
//line cmd/xgo/build_cmd.gox:22:1
	this.FlagOff()
//line cmd/xgo/build_cmd.gox:24:1
	this.Run__1(func(args []string) {
//line cmd/xgo/build_cmd.gox:25:1
		build1.Cmd.Run(build1.Cmd, args)
	})
}
func (this *build) Classfname() string {
	return "build"
}
//line cmd/xgo/fmt_cmd.gox:20
func (this *fmt) Main(_gop_arg0 string) {
	this.Command.Main(_gop_arg0)
//line cmd/xgo/fmt_cmd.gox:20:1
	this.Short("Format Go+ packages")
//line cmd/xgo/fmt_cmd.gox:22:1
	this.FlagOff()
//line cmd/xgo/fmt_cmd.gox:24:1
	this.Run__1(func(args []string) {
//line cmd/xgo/fmt_cmd.gox:25:1
		gopfmt.Cmd.Run(gopfmt.Cmd, args)
	})
}
func (this *fmt) Classfname() string {
	return "fmt"
}
//line cmd/xgo/install_cmd.gox:20
func (this *install) Main(_gop_arg0 string) {
	this.Command.Main(_gop_arg0)
//line cmd/xgo/install_cmd.gox:20:1
	this.Short("Build Go+ files and install target to GOBIN")
//line cmd/xgo/install_cmd.gox:22:1
	this.FlagOff()
//line cmd/xgo/install_cmd.gox:24:1
	this.Run__1(func(args []string) {
//line cmd/xgo/install_cmd.gox:25:1
		install1.Cmd.Run(install1.Cmd, args)
	})
}
func (this *install) Classfname() string {
	return "install"
}
//line cmd/xgo/run_cmd.gox:20
func (this *run) Main(_gop_arg0 string) {
	this.Command.Main(_gop_arg0)
//line cmd/xgo/run_cmd.gox:20:1
	this.Short("Compile and run a Go+ program")
//line cmd/xgo/run_cmd.gox:22:1
	this.FlagOff()
//line cmd/xgo/run_cmd.gox:24:1
	this.Run__1(func(args []string) {
//line cmd/xgo/run_cmd.gox:25:1
		run1.Cmd.Run(run1.Cmd, args)
	})
}
func (this *run) Classfname() string {
	return "run"
}
//line cmd/xgo/test_cmd.gox:20
func (this *test) Main(_gop_arg0 string) {
	this.Command.Main(_gop_arg0)
//line cmd/xgo/test_cmd.gox:20:1
	this.Short("Test Go+ packages")
//line cmd/xgo/test_cmd.gox:22:1
	this.FlagOff()
//line cmd/xgo/test_cmd.gox:24:1
	this.Run__1(func(args []string) {
//line cmd/xgo/test_cmd.gox:25:1
		test1.Cmd.Run(test1.Cmd, args)
	})
}
func (this *test) Classfname() string {
	return "test"
}
//line cmd/xgo/version_cmd.gox:21
func (this *version) Main(_gop_arg0 string) {
	this.Command.Main(_gop_arg0)
//line cmd/xgo/version_cmd.gox:21:1
	this.Short("Print Go+ version")
//line cmd/xgo/version_cmd.gox:23:1
	this.Run__0(func() {
//line cmd/xgo/version_cmd.gox:24:1
		fmt1.Println(stringutil.Concat("xgo ", env.Version(), " ", runtime.GOOS, "/", runtime.GOARCH))
	})
}
func (this *version) Classfname() string {
	return "version"
}
func main() {
//line cmd/xgo/version_cmd.gox:23:1
	new(App).Main()
}
