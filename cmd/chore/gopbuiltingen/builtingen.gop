import (
	"encoding/json"
	"gop/ast/gopq"
	"gop/env"
	"gop/parser"
	"gop/token"
)

type builtin struct {
	Name string
	Fn   struct {
		Pkg  string
		Name string
	}
}

type builtinTI struct {
	Methods []builtin
}

type builtinPkg struct {
	Builtins []builtin
	Types    []*builtinTI
}

func (p *builtinPkg) initBuiltinTIs(fn gopq.NodeSet) (tistr *builtinTI) {
	ti := fn.body.any.assignStmt.rhs(0).x.compositeLit("BuiltinTI")
	methods := ti.elt("methods").cache
	for method <- methods {
		aTI := &builtinTI{}
		for item <- method.elt {
			mthd := item.elt(0).unquotedString!
			fn := item.elt(1).one
			if ref := fn.callExpr.one; ref.ok {
				pkg := ref.fun.x.ident!
				name := ref.arg(0).unquotedString!
				aTI.Methods <- builtin{mthd, {pkg, name}}
			} else {
				name := fn.ident!
				aTI.Methods <- builtin{mthd, {"", name}}
			}
		}
		p.Types <- aTI
		if len(aTI.Methods) > 10 {
			tistr = aTI
		}
	}
	return
}

func (p *builtinPkg) newBuiltinDefault(fn gopq.NodeSet, tistr *builtinTI) {
	methods := fn.body.any.exprStmt.x.callExpr("ti.AddMethods").cache
	for method <- methods {
		aTI := &builtinTI{}
		for arg <- method.varg(0).x {
			mthd := arg.elt("Name").unquotedString!
			ref := arg.elt("Fn").callExpr.one
			pkg := ref.fun.x.ident!
			name := ref.arg(0).unquotedString!
			if pkg == "strx" {
				tistr.Methods <- builtin{mthd, {pkg, name}}
			} else {
				aTI.Methods <- builtin{mthd, {pkg, name}}
			}
		}
		if len(aTI.Methods) > 0 {
			p.Types <- aTI
		}
	}
}

func (p *builtinPkg) initBuiltin(fn gopq.NodeSet) {
	stmt := fn.body.any.exprStmt.x.cache
	item := stmt.callExpr("scope.Insert").arg(0).cache
	for call <- item.callExpr("gogen.NewOverloadFunc") {
		built := call.arg(2).unquotedString!
		ref := call.arg(3).callExpr.one
		pkg := ref.fun.x.ident!
		name := ref.arg(0).unquotedString!
		p.Builtins <- builtin{built, {pkg, name}}
	}
	for call <- stmt.callExpr("initBuiltinFns") {
		pkg := call.arg(2).ident!
		builtins := call.arg(3).unquotedStringElts!
		for built <- builtins {
			p.Builtins <- builtin{built, {pkg, built.capitalize}}
		}
	}
}

var pkg builtinPkg

root := env.GOPROOT()
fset := token.newFileSet

fns := gopq.fromFile(fset, "${root}/../gogen/builtin.go", nil, parser.ParseComments)!.funcs
tistr := pkg.initBuiltinTIs(fns.funcDecl("initBuiltinTIs").one)

fns = gopq.fromFile(fset, "${root}/cl/builtin.go", nil, parser.ParseComments)!.funcs
pkg.initBuiltin fns.funcDecl("initBuiltin").one
pkg.newBuiltinDefault fns.funcDecl("newBuiltinDefault").one, tistr

echo string(json.marshalIndent(&pkg, "", "  ")!)
