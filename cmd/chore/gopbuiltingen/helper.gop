import (
	"go/ast"
)

func importSpec(path string) *ast.ImportSpec {
	return {
		Path: {
			Value: path.quote,
		},
	}
}

func rmExargs(list []*ast.Field, exargs int) []*ast.Field {
	if exargs == 0 {
		return list
	}
	n := len(list)
	ret := make([]*ast.Field, n)
	for i, f <- list {
		ret[i] = f
	}
	for n > 0 {
		f := ret[n-1]
		if c := len(f.Names); c > exargs {
			f.Names = f.Names[:c-exargs]
			break
		} else {
			exargs -= c
		}
		n--
	}
	return ret[:n]
}

func toParams(params *ast.FieldList, at string) *ast.FieldList {
	if params == nil {
		return nil
	}
	if at == "buil" {
		at = "builtin"
	}
	list := make([]*ast.Field, len(params.List))
	for i, p <- params.List {
		typ := p.Type
		switch t := typ.(type) {
		case *ast.Ident:
			if t.isExported {
				typ = &ast.SelectorExpr{
					X:   ast.newIdent(at),
					Sel: t,
				}
			}
		case *ast.StarExpr:
			if x, ok := t.X.(*ast.Ident); ok && x.isExported {
				typ = &ast.StarExpr{
					X: &ast.SelectorExpr{
						X:   ast.newIdent(at),
						Sel: x,
					},
				}
			}
		}
		list[i] = {
			Doc:     p.Doc,
			Names:   p.Names,
			Type:    typ,
			Tag:     p.Tag,
			Comment: p.Comment,
		}
	}
	return {List: list}
}
